@page "/Friends"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<div class="ChatBox">
    @if (!IsConnected)
    {
        <div class="input-group">
            <input @bind="username" class="form-control" placeholder = "What's Your Name?'">
            <button class="btn btn-primary from-control-append" @onclick="Connect">
                Connect
            </button>
        </div>
    }
    else
    {
        <textarea style="width:100%;height:500px;">
            @messages
        </textarea>

        <div class="input-group">
            <input @bind-value="message"
            @bind-value:event="oninput"
            @onkeyup="HandleInput"
            class="form-control" />
            <button class="btn btn-primary form-group-append"
            @onclick="Send"
            disabled="@(!IsConnected)"
            >
            Send
            </button>
        </div>
    }
</div>


@code{
    private HubConnection? hubConnection;
    private string message = string.Empty;
    private string username = string.Empty;
    private string messages = string.Empty;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
        .Build();

        hubConnection.On<string, string>("GetThatMessageDude", (user, message) =>
            {
                var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
                messages += msg + "\n";
                StateHasChanged();
            });
        await hubConnection.StartAsync();
    }
    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMEssageToChat", username, message);
            message = string.Empty;
        }
    }
    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}